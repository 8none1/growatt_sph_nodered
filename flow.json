[
    {
        "id": "f0197a95.05059",
        "type": "tab",
        "label": "Solar",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5bec566505d5353b",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read Holding Regs 0-124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "124",
        "rate": "1",
        "rateUnit": "h",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "40f20c7f.13a934",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "9d16b630b54d739c"
            ],
            []
        ]
    },
    {
        "id": "9623d97c46112f52",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read Holding Regs 1000-1124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "1000",
        "quantity": "124",
        "rate": "1",
        "rateUnit": "h",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "40f20c7f.13a934",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "c6680a64aadfb373"
            ],
            []
        ]
    },
    {
        "id": "c20028b72b6c36e9",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read INPUT Regs 0-124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "124",
        "rate": "30",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "40f20c7f.13a934",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "40b20b09981f8457"
            ],
            []
        ]
    },
    {
        "id": "8f9985b09311f14f",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read INPUT Regs 1000-1124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "1000",
        "quantity": "125",
        "rate": "30",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "40f20c7f.13a934",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 160,
        "y": 320,
        "wires": [
            [
                "a82805ddb75feb09"
            ],
            []
        ]
    },
    {
        "id": "40b20b09981f8457",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 0-124",
        "func": "\nfunction readDoubleReg(r1, multiplier = 1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1 + 1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\nvar newMsg = msg;\nvar newPayload = {};\n\n// Inverter status\n// Seems to be 6 at night\nnewPayload['inverterStatus'] = msg.payload[0];\n\n// PV Total Power\nnewPayload['pvPowerTotal'] = readDoubleReg(1, 0.1);\n// PV1\nnewPayload['pv1Voltage'] = round(msg.payload[3] * 0.1);\nnewPayload['pv1Current'] = round(msg.payload[4] * 0.1);\nnewPayload['pv1Power'] = readDoubleReg(5, 0.1);\n\n// PV2\nnewPayload['pv2Voltage'] = round(msg.payload[7] * 0.1);\nnewPayload['pv2Current'] = round(msg.payload[8] * 0.1);\nnewPayload['pv2Power']   = readDoubleReg(9, 0.1);\n\n// \"PAC\" seems to be PV power output plus battery\nnewPayload['pvBattPower'] = readDoubleReg(35,0.1);\n\n// General grid conditons\nnewPayload['gridFreq']          = round(msg.payload[37] * 0.01);\nnewPayload['gridVolt']          = round(msg.payload[38] * 0.1);\nnewPayload['pvOutputCurrent'] = round(msg.payload[39] * 0.1); // This seems to be PV output current, not grid\nnewPayload['pvOutputWattsVA'] = readDoubleReg(40,0.1);\n\n// Temperatures\nnewPayload['inverterTemperature'] = msg.payload[93] * 0.1;\nnewPayload['IPMTemperature']      = round(msg.payload[94] * 0.1); // What is an IPM?\nnewPayload['boostTemperature']    = round(msg.payload[95] * 0.1);\n\n// Power related\nnewPayload['inverterPowerFactorNow'] = msg.payload[100]; // Says 0 -> 20000 which is odd.  Surely max PF is 1?\nnewPayload['realOutputPowerPercent'] = msg.payload[101];\nnewPayload['OPFullWatt'] = readDoubleReg(102,0.1); // Seems to be nothing?\n\n// Fault codes\nnewPayload['InverterFaultCode'] = msg.payload[105];\nnewPayload['FaultBitCode'] = readDoubleReg(106);\nnewPayload['WarningBitCode'] = readDoubleReg(110);\n\n// Battery\nnewPayload['ACChargePower']      = readDoubleReg(116, 0.1); // This seems to be something like how much power is being used to run the battery itself\n\n// Current priority\nnewPayload['CurrentPriority'] = msg.payload[118];\n// 0 = Load, 1 = Battery, 2 = Grid\n\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            [
                "0b29335363f5c288"
            ]
        ]
    },
    {
        "id": "50ccfd2af4969bcb",
        "type": "mqtt out",
        "z": "f0197a95.05059",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9e58797a.d2e348",
        "x": 1290,
        "y": 340,
        "wires": []
    },
    {
        "id": "a82805ddb75feb09",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 1000-1124",
        "func": "// The read from modbus should start at 1000 and read 124 (or is it 125) registers\n// so register 1000 is array pos zero, 1011 is array position 11, etc.\n// These registers are for an SPH style Growatt inverter.\n\nfunction readDoubleReg(r1, multiplier=1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1+1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\nvar newMsg = msg;\nvar newPayload = {};\n\n// Work Mode\nnewPayload['systemWorkMode'] = msg.payload[0];\n\nnewPayload['dischargePower'] = readDoubleReg(9, 0.1);\nnewPayload['chargePower'] = readDoubleReg(11, 0.1);\nnewPayload['battVoltage'] = round(msg.payload[13] * 0.1);\nnewPayload['battSOC'] = msg.payload[14];\n\n// PAC power - I think this is AC power going from grid to load\n// R, S, T are each of three phase.  Use R for single phase.\n// Or just use total\n\n//newPayload['pacToUserR']     = readDoubleReg(15, 0.1);\n//newPayload['pacToUserS']     = readDoubleReg(17, 0.1);\n//newPayload['pacToUserT']     = readDoubleReg(19, 0.1);\nnewPayload['gridImportPowerTotal'] = readDoubleReg(21, 0.1); // was pacToUserTotal\n\n//newPayload['pacToGridR'] = readDoubleReg(23, 0.1);\n//newPayload['pacToGridS'] = readDoubleReg(25, 0.1);\n//newPayload['pacToGridT'] = readDoubleReg(27, 0.1);\nnewPayload['gridExportPowerTotal'] = readDoubleReg(29, 0.1); // was pacToGridTotal\n\n//newPayload['pLocalLoadR'] = readDoubleReg(31, 0.1);\n//newPayload['pLocalLoadS'] = readDoubleReg(33, 0.1);\n//newPayload['pLocalLoadT'] = readDoubleReg(35, 0.1);\nnewPayload['pLocalLoadTotal'] = readDoubleReg(37, 0.1);\n\nnewPayload['battTemperature']     = msg.payload[40];\n\n// EPS/UPS information\nnewPayload['epsFreq'] = msg.payload[67];\nnewPayload['epsVolt'] = round(msg.payload[68] / 10);\nnewPayload['epsCurrent'] = msg.payload[69];\nnewPayload['epsPower'] = readDoubleReg(70, 0.1);\nnewPayload['epsLoadPercent'] = msg.payload[80];\nnewPayload['epsPowerFactor'] = msg.payload[81];\n\n// BMS Info\nnewPayload['bmsStatus'] = msg.payload[83];\n// Bit map for ^\n// 0 & 1 - 00 soft start, 01 stand by, 10 charge, 11 discharge\n// 2 - errors?\n// 3 - cell balance 0 = unbalance, 1 = balance\n// 4 - sleep status 0 disable 1 enable\n// 5 output discharge - 0 disable 1 enable\n// 6 output charge\n// 7 battery terminal - 0 connected, 1 disconnected\n// 8 & 9 operation mode, 00 - stand alone, 01 - parallel, 10 - parallel preperation\n// 10 & 11 SP status - 00 none, 01 standby, 10 charge, 11 discharge\nnewPayload['bmsError'] = msg.payload[85];\nnewPayload['bmsSOC'] = msg.payload[86];\nnewPayload['bmsDeltaV'] = msg.payload[94];\nnewPayload['bmsCycleCount'] = msg.payload[95];\nnewPayload['bmsSOH'] = msg.payload[96];\n// BMS Cell state\nfor (let i = 108; i <=123; i++ ) {\n    var cell = \"cellVoltage\" + (i-107);\n    newPayload[cell] = msg.payload[i];\n}\n\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "0b29335363f5c288"
            ]
        ]
    },
    {
        "id": "9d16b630b54d739c",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 0-124",
        "func": "function readDoubleReg(r1, multiplier = 1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1 + 1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\n\n\nvar newPayload = {};\n\nnewPayload['safetyFunctionsBitMap'] = msg.payload[1];\nnewPayload['maxOutputActivePower'] = msg.payload[3];\nnewPayload['maxOutputReactivePower'] = msg.payload[4];\nnewPayload['inverterPowerFactor'] = msg.payload[5];\nnewPayload['NormalPower'] = readDoubleReg(6, 0.1);\nnewPayload['inverterNormalVoltage'] = msg.payload[8];\nnewPayload['firmwareVersionH'] = msg.payload[9];\nnewPayload['firmwareVersionM'] = msg.payload[10];\nnewPayload['firmwareVersionL'] = msg.payload[11];\nnewPayload['controllerVersionH'] = msg.payload[12];\nnewPayload['controllerVersionM'] = msg.payload[13];\nnewPayload['controllerVersionL'] = msg.payload[14]\nnewPayload['lcdLanguage'] = msg.payload[15];\n\n// Time / Date\nnewPayload['inverterTimeYear'] = msg.payload[45];\nnewPayload['inverterTimeMonth'] = msg.payload[46];\nnewPayload['inverterTimeDay'] = msg.payload[47];\nnewPayload['inverterTimeHour'] = msg.payload[48];\nnewPayload['inverterTimeMinute'] = msg.payload[49];\nnewPayload['inverterTimeSecond'] = msg.payload[50];\nnewPayload['inverterTimeWeekly'] = msg.payload[51]; // Assume this is DOW\n\nnewPayload['exportLimitState'] = msg.payload[122];\nnewPayload['exportLimitRate'] = msg.payload[123];\n\nvar newMsg = {};\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "0b29335363f5c288"
            ]
        ]
    },
    {
        "id": "c6680a64aadfb373",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 1000-1124",
        "func": "\nfunction readDoubleReg(r1, multiplier = 1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1 + 1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\nvar newMsg = msg;\nvar newPayload = {};\n\n// Battery Charging Config in volts\n// Not sure I want to mess with this\nnewPayload['vbatStopCharge'] = msg.payload[5];\nnewPayload['vbatStopDischarge'] = msg.payload[6];\n\n// Priority Mode - 0 = load, 1 = Batt, 2 = Grid\nnewPayload['priorityMode'] = msg.payload[44];\n\nnewPayload['exportToGridRatePercent'] = msg.payload[70];\nnewPayload['exportToGridStopDischargePercent'] = msg.payload[71];\n\n// 1080 - 1088 : time blocks for grid first\n// 1090 - 1108 : time blocks for batt first\n// 1110 - 1118 : time blocks for load first\n\nnewPayload['acChargeEnabled'] = msg.payload[92];\n\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "0b29335363f5c288"
            ]
        ]
    },
    {
        "id": "0b29335363f5c288",
        "type": "modbus-getter",
        "z": "f0197a95.05059",
        "name": "Get Serial Number",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "23",
        "quantity": "5",
        "server": "40f20c7f.13a934",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 790,
        "y": 200,
        "wires": [
            [],
            [
                "f70d0aafe1ba1ad9"
            ]
        ]
    },
    {
        "id": "f70d0aafe1ba1ad9",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Append Serial Number",
        "func": "var newMsg = {};\nnewMsg.payload = msg.registers;\nnewMsg.payload['serialNumber'] = String.fromCharCode(...msg.payload.buffer);\nnewMsg.topic=\"solar/test\"\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 340,
        "wires": [
            [
                "50ccfd2af4969bcb",
                "54fd29c55cb2f15d"
            ]
        ]
    },
    {
        "id": "54fd29c55cb2f15d",
        "type": "debug",
        "z": "f0197a95.05059",
        "d": true,
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 460,
        "wires": []
    },
    {
        "id": "f8e902eda5c9680c",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read Holding Regs 0-124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "124",
        "rate": "1",
        "rateUnit": "h",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "36ae6849979c3179",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 420,
        "wires": [
            [
                "0556d37e62194ff5"
            ],
            []
        ]
    },
    {
        "id": "92ae79ef1ba10125",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read Holding Regs 1000-1124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "1000",
        "quantity": "124",
        "rate": "1",
        "rateUnit": "h",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "36ae6849979c3179",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 480,
        "wires": [
            [
                "7c7876a8116862ca"
            ],
            []
        ]
    },
    {
        "id": "ebdc41100dfa463f",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read INPUT Regs 0-124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "124",
        "rate": "30",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "36ae6849979c3179",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 540,
        "wires": [
            [
                "b3cb0bb204b4ba59"
            ],
            []
        ]
    },
    {
        "id": "d52f7b289c8968fa",
        "type": "modbus-read",
        "z": "f0197a95.05059",
        "name": "Read INPUT Regs 1000-1124",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "1000",
        "quantity": "125",
        "rate": "30",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "36ae6849979c3179",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 160,
        "y": 600,
        "wires": [
            [
                "d3c7dd356d2e0a5d"
            ],
            []
        ]
    },
    {
        "id": "d3c7dd356d2e0a5d",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 1000-1124",
        "func": "// The read from modbus should start at 1000 and read 124 (or is it 125) registers\n// so register 1000 is array pos zero, 1011 is array position 11, etc.\n// These registers are for an SPH style Growatt inverter.\n\nfunction readDoubleReg(r1, multiplier=1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1+1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\nvar newMsg = msg;\nvar newPayload = {};\n\n// Work Mode\nnewPayload['systemWorkMode'] = msg.payload[0];\n\n//newPayload['dischargePower'] = readDoubleReg(9, 0.1);\n//newPayload['chargePower'] = readDoubleReg(11, 0.1);\n//newPayload['battVoltage'] = round(msg.payload[13] * 0.1);\n//newPayload['battSOC'] = msg.payload[14];\n\n// PAC power - I think this is AC power going from grid to load\n// R, S, T are each of three phase.  Use R for single phase.\n// Or just use total\n\n//newPayload['pacToUserR']     = readDoubleReg(15, 0.1);\n//newPayload['pacToUserS']     = readDoubleReg(17, 0.1);\n//newPayload['pacToUserT']     = readDoubleReg(19, 0.1);\nnewPayload['gridImportPowerTotal'] = readDoubleReg(21, 0.1); // was pacToUserTotal\n\n//newPayload['pacToGridR'] = readDoubleReg(23, 0.1);\n//newPayload['pacToGridS'] = readDoubleReg(25, 0.1);\n//newPayload['pacToGridT'] = readDoubleReg(27, 0.1);\nnewPayload['gridExportPowerTotal'] = readDoubleReg(29, 0.1); // was pacToGridTotal\n\n//newPayload['pLocalLoadR'] = readDoubleReg(31, 0.1);\n//newPayload['pLocalLoadS'] = readDoubleReg(33, 0.1);\n//newPayload['pLocalLoadT'] = readDoubleReg(35, 0.1);\nnewPayload['pLocalLoadTotal'] = readDoubleReg(37, 0.1);\n\n//newPayload['battTemperature']     = msg.payload[40];\n\n// EPS/UPS information\n// newPayload['epsFreq'] = msg.payload[67];\n// newPayload['epsVolt'] = round(msg.payload[68] / 10);\n// newPayload['epsCurrent'] = msg.payload[69];\n// newPayload['epsPower'] = readDoubleReg(70, 0.1);\n// newPayload['epsLoadPercent'] = msg.payload[80];\n// newPayload['epsPowerFactor'] = msg.payload[81];\n\n// BMS Info\n//newPayload['bmsStatus'] = msg.payload[83];\n// Bit map for ^\n// 0 & 1 - 00 soft start, 01 stand by, 10 charge, 11 discharge\n// 2 - errors?\n// 3 - cell balance 0 = unbalance, 1 = balance\n// 4 - sleep status 0 disable 1 enable\n// 5 output discharge - 0 disable 1 enable\n// 6 output charge\n// 7 battery terminal - 0 connected, 1 disconnected\n// 8 & 9 operation mode, 00 - stand alone, 01 - parallel, 10 - parallel preperation\n// 10 & 11 SP status - 00 none, 01 standby, 10 charge, 11 discharge\n// newPayload['bmsError'] = msg.payload[85];\n// newPayload['bmsSOC'] = msg.payload[86];\n// newPayload['bmsDeltaV'] = msg.payload[94];\n// newPayload['bmsCycleCount'] = msg.payload[95];\n// newPayload['bmsSOH'] = msg.payload[96];\n// BMS Cell state\n// for (let i = 108; i <=123; i++ ) {\n//     var cell = \"cellVoltage\" + (i-107);\n//     newPayload[cell] = msg.payload[i];\n// }\n\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "50383e421fc0e444"
            ]
        ]
    },
    {
        "id": "b3cb0bb204b4ba59",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 0-124",
        "func": "\nfunction readDoubleReg(r1, multiplier = 1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1 + 1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\nvar newMsg = msg;\nvar newPayload = {};\n\n// Inverter status\n// Seems to be 6 at night\nnewPayload['inverterStatus'] = msg.payload[0];\n\n// PV Total Power\nnewPayload['pvPowerTotal'] = readDoubleReg(1, 0.1);\n// PV1\nnewPayload['pv1Voltage'] = round(msg.payload[3] * 0.1);\nnewPayload['pv1Current'] = round(msg.payload[4] * 0.1);\nnewPayload['pv1Power'] = readDoubleReg(5, 0.1);\n\n// PV2\nnewPayload['pv2Voltage'] = round(msg.payload[7] * 0.1);\nnewPayload['pv2Current'] = round(msg.payload[8] * 0.1);\nnewPayload['pv2Power']   = readDoubleReg(9, 0.1);\n\n// \"PAC\" seems to be PV power output plus battery\n//newPayload['pvBattPower'] = readDoubleReg(35,0.1);\n\n// General grid conditons\nnewPayload['gridFreq']          = round(msg.payload[37] * 0.01);\nnewPayload['gridVolt']          = round(msg.payload[38] * 0.1);\nnewPayload['pvOutputCurrent'] = round(msg.payload[39] * 0.1); // This seems to be PV output current, not grid\nnewPayload['pvOutputWattsVA'] = readDoubleReg(40,0.1);\n\n// Temperatures\nnewPayload['inverterTemperature'] = msg.payload[93] * 0.1;\nnewPayload['IPMTemperature']      = round(msg.payload[94] * 0.1); // What is an IPM?\nnewPayload['boostTemperature']    = round(msg.payload[95] * 0.1);\n\n// Power related\nnewPayload['inverterPowerFactorNow'] = msg.payload[100]; // Says 0 -> 20000 which is odd.  Surely max PF is 1?\nnewPayload['realOutputPowerPercent'] = msg.payload[101];\nnewPayload['OPFullWatt'] = readDoubleReg(102,0.1); // Seems to be nothing?\n\n// Fault codes\nnewPayload['InverterFaultCode'] = msg.payload[105];\nnewPayload['FaultBitCode'] = readDoubleReg(106);\nnewPayload['WarningBitCode'] = readDoubleReg(110);\n\n// Battery\nnewPayload['ACChargePower']      = readDoubleReg(116, 0.1); // This seems to be something like how much power is being used to run the battery itself\n\n// Current priority\nnewPayload['CurrentPriority'] = msg.payload[118];\n// 0 = Load, 1 = Battery, 2 = Grid\n\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 540,
        "wires": [
            [
                "50383e421fc0e444"
            ]
        ]
    },
    {
        "id": "7c7876a8116862ca",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 1000-1124",
        "func": "\nfunction readDoubleReg(r1, multiplier = 1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1 + 1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\nvar newMsg = msg;\nvar newPayload = {};\n\n// Battery Charging Config in volts\n// Not sure I want to mess with this\n//newPayload['vbatStopCharge'] = msg.payload[5];\n//newPayload['vbatStopDischarge'] = msg.payload[6];\n\n// Priority Mode - 0 = load, 1 = Batt, 2 = Grid\nnewPayload['priorityMode'] = msg.payload[44];\n\n//newPayload['exportToGridRatePercent'] = msg.payload[70];\n//newPayload['exportToGridStopDischargePercent'] = msg.payload[71];\n\n// 1080 - 1088 : time blocks for grid first\n// 1090 - 1108 : time blocks for batt first\n// 1110 - 1118 : time blocks for load first\n\n//newPayload['acChargeEnabled'] = msg.payload[92];\n\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "50383e421fc0e444"
            ]
        ]
    },
    {
        "id": "0556d37e62194ff5",
        "type": "function",
        "z": "f0197a95.05059",
        "name": "Process Input Regs 0-124",
        "func": "function readDoubleReg(r1, multiplier = 1) {\n    // Reads register r1 AND r1+1 from the msg.payload\n    // Returns a rounded number \n    var value = (msg.payload[r1] << 16 | msg.payload[r1 + 1]);\n    value = value * multiplier;\n    return Math.trunc(value);\n}\n\nfunction round(num) {\n    return Math.round(num * 10) / 10;\n}\n\n\n\nvar newPayload = {};\n\nnewPayload['safetyFunctionsBitMap'] = msg.payload[1];\nnewPayload['maxOutputActivePower'] = msg.payload[3];\nnewPayload['maxOutputReactivePower'] = msg.payload[4];\nnewPayload['inverterPowerFactor'] = msg.payload[5];\nnewPayload['NormalPower'] = readDoubleReg(6, 0.1);\nnewPayload['inverterNormalVoltage'] = msg.payload[8];\nnewPayload['firmwareVersionH'] = msg.payload[9];\nnewPayload['firmwareVersionM'] = msg.payload[10];\nnewPayload['firmwareVersionL'] = msg.payload[11];\nnewPayload['controllerVersionH'] = msg.payload[12];\nnewPayload['controllerVersionM'] = msg.payload[13];\nnewPayload['controllerVersionL'] = msg.payload[14]\nnewPayload['lcdLanguage'] = msg.payload[15];\n\n// Time / Date\nnewPayload['inverterTimeYear'] = msg.payload[45];\nnewPayload['inverterTimeMonth'] = msg.payload[46];\nnewPayload['inverterTimeDay'] = msg.payload[47];\nnewPayload['inverterTimeHour'] = msg.payload[48];\nnewPayload['inverterTimeMinute'] = msg.payload[49];\nnewPayload['inverterTimeSecond'] = msg.payload[50];\nnewPayload['inverterTimeWeekly'] = msg.payload[51]; // Assume this is DOW\n\nnewPayload['exportLimitState'] = msg.payload[122];\nnewPayload['exportLimitRate'] = msg.payload[123];\n\nvar newMsg = {};\nnewMsg['topic'] = \"solar/test\";\nnewMsg['registers'] = newPayload;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "50383e421fc0e444"
            ]
        ]
    },
    {
        "id": "50383e421fc0e444",
        "type": "modbus-getter",
        "z": "f0197a95.05059",
        "name": "Get Serial Number",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "23",
        "quantity": "5",
        "server": "36ae6849979c3179",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 790,
        "y": 480,
        "wires": [
            [],
            [
                "f70d0aafe1ba1ad9"
            ]
        ]
    },
    {
        "id": "40f20c7f.13a934",
        "type": "modbus-client",
        "name": "Inverter 1 EW11-1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "ew11-1.whizzy.org",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB1",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "301",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 1,
        "commandDelay": 1000,
        "clientTimeout": 2000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 5000,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "9e58797a.d2e348",
        "type": "mqtt-broker",
        "name": "Local MQTT Server",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "36ae6849979c3179",
        "type": "modbus-client",
        "name": "Inverter 2 EW11-2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "ew11-2.whizzy.org",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    }
]
